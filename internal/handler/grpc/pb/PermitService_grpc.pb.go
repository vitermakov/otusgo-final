// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: PermitService.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermitClient is the client API for Permit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermitClient interface {
	CheckQuery(ctx context.Context, in *PermitReq, opts ...grpc.CallOption) (*PermitResult, error)
	ResetIP(ctx context.Context, in *RstIPReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetLogin(ctx context.Context, in *RstLoginReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permitClient struct {
	cc grpc.ClientConnInterface
}

func NewPermitClient(cc grpc.ClientConnInterface) PermitClient {
	return &permitClient{cc}
}

func (c *permitClient) CheckQuery(ctx context.Context, in *PermitReq, opts ...grpc.CallOption) (*PermitResult, error) {
	out := new(PermitResult)
	err := c.cc.Invoke(ctx, "/api.Permit/CheckQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permitClient) ResetIP(ctx context.Context, in *RstIPReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Permit/ResetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permitClient) ResetLogin(ctx context.Context, in *RstLoginReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Permit/ResetLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermitServer is the server API for Permit service.
// All implementations must embed UnimplementedPermitServer
// for forward compatibility
type PermitServer interface {
	CheckQuery(context.Context, *PermitReq) (*PermitResult, error)
	ResetIP(context.Context, *RstIPReq) (*emptypb.Empty, error)
	ResetLogin(context.Context, *RstLoginReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedPermitServer()
}

// UnimplementedPermitServer must be embedded to have forward compatible implementations.
type UnimplementedPermitServer struct {
}

func (UnimplementedPermitServer) CheckQuery(context.Context, *PermitReq) (*PermitResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuery not implemented")
}
func (UnimplementedPermitServer) ResetIP(context.Context, *RstIPReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetIP not implemented")
}
func (UnimplementedPermitServer) ResetLogin(context.Context, *RstLoginReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLogin not implemented")
}
func (UnimplementedPermitServer) mustEmbedUnimplementedPermitServer() {}

// UnsafePermitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermitServer will
// result in compilation errors.
type UnsafePermitServer interface {
	mustEmbedUnimplementedPermitServer()
}

func RegisterPermitServer(s grpc.ServiceRegistrar, srv PermitServer) {
	s.RegisterService(&Permit_ServiceDesc, srv)
}

func _Permit_CheckQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServer).CheckQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Permit/CheckQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServer).CheckQuery(ctx, req.(*PermitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permit_ResetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RstIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServer).ResetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Permit/ResetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServer).ResetIP(ctx, req.(*RstIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Permit_ResetLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RstLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermitServer).ResetLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Permit/ResetLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermitServer).ResetLogin(ctx, req.(*RstLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Permit_ServiceDesc is the grpc.ServiceDesc for Permit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Permit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Permit",
	HandlerType: (*PermitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckQuery",
			Handler:    _Permit_CheckQuery_Handler,
		},
		{
			MethodName: "ResetIP",
			Handler:    _Permit_ResetIP_Handler,
		},
		{
			MethodName: "ResetLogin",
			Handler:    _Permit_ResetLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PermitService.proto",
}
