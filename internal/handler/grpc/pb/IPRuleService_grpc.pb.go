// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: IPRuleService.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPRuleClient is the client API for IPRule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPRuleClient interface {
	AddToWhiteList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddToBlackList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromWhiteList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFromBlackList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type iPRuleClient struct {
	cc grpc.ClientConnInterface
}

func NewIPRuleClient(cc grpc.ClientConnInterface) IPRuleClient {
	return &iPRuleClient{cc}
}

func (c *iPRuleClient) AddToWhiteList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.IPRule/AddToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRuleClient) AddToBlackList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.IPRule/AddToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRuleClient) DeleteFromWhiteList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.IPRule/DeleteFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRuleClient) DeleteFromBlackList(ctx context.Context, in *IPNet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.IPRule/DeleteFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPRuleServer is the server API for IPRule service.
// All implementations must embed UnimplementedIPRuleServer
// for forward compatibility
type IPRuleServer interface {
	AddToWhiteList(context.Context, *IPNet) (*emptypb.Empty, error)
	AddToBlackList(context.Context, *IPNet) (*emptypb.Empty, error)
	DeleteFromWhiteList(context.Context, *IPNet) (*emptypb.Empty, error)
	DeleteFromBlackList(context.Context, *IPNet) (*emptypb.Empty, error)
	mustEmbedUnimplementedIPRuleServer()
}

// UnimplementedIPRuleServer must be embedded to have forward compatible implementations.
type UnimplementedIPRuleServer struct {
}

func (UnimplementedIPRuleServer) AddToWhiteList(context.Context, *IPNet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedIPRuleServer) AddToBlackList(context.Context, *IPNet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedIPRuleServer) DeleteFromWhiteList(context.Context, *IPNet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromWhiteList not implemented")
}
func (UnimplementedIPRuleServer) DeleteFromBlackList(context.Context, *IPNet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromBlackList not implemented")
}
func (UnimplementedIPRuleServer) mustEmbedUnimplementedIPRuleServer() {}

// UnsafeIPRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPRuleServer will
// result in compilation errors.
type UnsafeIPRuleServer interface {
	mustEmbedUnimplementedIPRuleServer()
}

func RegisterIPRuleServer(s grpc.ServiceRegistrar, srv IPRuleServer) {
	s.RegisterService(&IPRule_ServiceDesc, srv)
}

func _IPRule_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPNet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRuleServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IPRule/AddToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRuleServer).AddToWhiteList(ctx, req.(*IPNet))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRule_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPNet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRuleServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IPRule/AddToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRuleServer).AddToBlackList(ctx, req.(*IPNet))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRule_DeleteFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPNet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRuleServer).DeleteFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IPRule/DeleteFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRuleServer).DeleteFromWhiteList(ctx, req.(*IPNet))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRule_DeleteFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPNet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRuleServer).DeleteFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IPRule/DeleteFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRuleServer).DeleteFromBlackList(ctx, req.(*IPNet))
	}
	return interceptor(ctx, in, info, handler)
}

// IPRule_ServiceDesc is the grpc.ServiceDesc for IPRule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPRule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.IPRule",
	HandlerType: (*IPRuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToWhiteList",
			Handler:    _IPRule_AddToWhiteList_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _IPRule_AddToBlackList_Handler,
		},
		{
			MethodName: "DeleteFromWhiteList",
			Handler:    _IPRule_DeleteFromWhiteList_Handler,
		},
		{
			MethodName: "DeleteFromBlackList",
			Handler:    _IPRule_DeleteFromBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "IPRuleService.proto",
}
